(B)
The little white rabbit has a magical palette with a grid of $n$ rows and $m$ columns. Before starting to mix the colors, the little white rabbit will squeeze a kind of pigment to the left of each row, denoted by $a_1, a_2, \ldots, a_n$, and also squeeze a kind of pigment above each column, denoted by $b_1, b_2, \ldots, b_m$.

There are a total of $n \times m$ kinds of selectable pigments, represented by integers $0, 1, 2, \ldots, nm-1$ for different pigments. Then, in the cell of the $i$\-th row and the $j$\-th column, the little white rabbit will mix a color $c_{i,j} = a_ib_j \bmod nm$ using the pigment $a_i$ to the left of the $i$\-th row and the pigment $b_j$ above the $j$\-th column.

The little white rabbit hopes that each of the $n \times m$ cells has a different color, and you need to find out whether it can be achieved.

**Input**

The first line of the input contains an integer $T$ ($1 \le T \le 10^4$), indicating the number of test cases. For each test case:

The only line contains two integers $n$ and $m$ ($1 \le n, m \le 10^6$, $1 \le n \times m \le 10^6$), indicating the number of rows and the number of columns.

It is guaranteed that the sum of $n \times m$ over all test cases does not exceed $10^6$.

**Output**

For each test case, if no solution exists, output "No" (without quotes) in one line. Otherwise, output three lines:

-   The first line contains one string "Yes" (without quotes).
-   The second line contains $n$ integers $a_1, a_2, \ldots, a_n$ ($0 \le a_i &lt; nm$).
-   The third line contains $m$ integers $b_1, b_2, \ldots, b_m$ ($0 \le b_i &lt; nm$).

Example Input1：
2 3
Example Output1：
Yes
1 2
1 3 5
Example Input2：
2 2
Example Output2：
No

**Note**

For the first sample case, $[c_{1,1}, c_{1,2}, c_{1,3}, c_{2,1}, c_{2,2}, c_{2,3}] = [1, 3, 5, 2, 0, 4]$, which are pairwise different.

###

(D)
A permutation of $1$ to $n$ in this problem is a $1$\-based sequence of $n$ integers in which every integer from $1$ to $n$ appears exactly once. Alice and Bob are playing a game on $A = [a_1, a_2, \ldots, a_n]$ and $B = [b_1, b_2, \ldots, b_n]$, two permutations of $1$ to $n$. They take turns to perform operations, with Alice going first, and the one with no possible operation loses.

In each turn, Alice can only operate on the permutation $A$, while Bob can only operate on the permutation $B$. A valid operation consists of choosing two indices $i$ and $j$ on the operable permutation ($1 \leq i, j \leq n$) and swapping their corresponding elements, under the constraint that $\sum_{i=1}^{n}{a_i b_i} = a_1 b_1 + a_2 b_2 + \cdots + a_n b_n$, the dot product of these two permutations, must strictly increase after the swap. Namely, a player loses if he or she cannot perform any swap to increase the dot product, and the other player wins the game.

As Alice and Bob are both clever enough to adopt the best strategy, the winner of such a game can be determined from the start. Therefore, they decide to play the game $n$ times with modifications to make it less boring. Please help them to predict the winners of these $n$ games.

More specifically, two initial permutations $A = [a_1, a_2, \ldots, a_n]$, $B = [b_1, b_2, \ldots, b_n]$, and $(n - 1)$ modifications $[(t_1, l_1, r_1, d_1), (t_2, l_2, r_2, d_2), \ldots, (t_{n - 1}, l_{n - 1}, r_{n - 1}, d_{n - 1})]$ will be given. The first game will start from the given permutations $A$ and $B$, and for $k = 1, 2, \ldots, n - 1$, the $(k + 1)$\-th game will start from the permutations for the $k$\-th game after shifting the interval between indices $l_k$ and $r_k$ of the permutation $t_k$ left $d_k$ times.

Please note that shifting an interval $[p_l, p_{l + 1}, \ldots, p_r]$ left once will give $[p_{l + 1}, p_{l + 2}, \ldots, p_r, p_l]$. For instance, shifting the interval $[2, 4]$ of $[1, 2, 3, 4, 5]$ left once will give $[1, 3, 4, 2, 5]$, and twice will give $[1, 4, 2, 3, 5]$. Besides, shifting the interval $[1, 5]$ of $[3, 1, 4, 5, 2]$ left $4$ times will give $[2, 3, 1, 4, 5]$.

**Input**

The first line of the input contains an integer $T$ ($1 \leq T \leq 10^5$), indicating the number of test cases. For each test case:

The first line contains an integer $n$ ($1 \leq n \leq 5 \times 10^5$), indicating the length of the permutations.

The second line contains $n$ distinct integers $a_1, a_2, \ldots, a_n$ ($1 \leq a_i \leq n$), indicating the permutation $A$.

The third line contains $n$ distinct integers $b_1, b_2, \ldots, b_n$ ($1 \leq b_i \leq n$), indicating the permutation $B$.

In the next $(n - 1)$ lines, the $i$\-th line contains a character $t_i$ ($t_i \in \{\texttt{A}, \texttt{B}\}$), and three integers $l_i$, $r_i$ ($1 \leq l_i \leq r_i \leq n$), and $d_i$ ($1 \leq d_i \leq n$).

It is guaranteed that the sum of $n$ over all test cases does not exceed $5 \times 10^5$.

**Output**

For each test case, output a string of length $n$ in one line, where the $i$\-th character of the string is A if Alice wins the $i$\-th game, or B otherwise (i.e., Bob wins the $i$\-th game).


Example Input：
5
3
1 2 3
1 2 3
A 1 1 1
B 1 1 1
3
1 2 3
2 1 3
A 1 2 1
B 2 2 1
3
1 2 3
2 1 3
A 1 3 1
B 1 2 1
3
1 2 3
3 2 1
A 2 2 1
B 2 3 1
10
1 2 3 4 5 6 7 8 9 10
4 2 3 9 6 1 5 8 7 10
A 2 9 10
B 2 7 9
A 1 10 8
B 4 6 7
B 3 10 6
A 2 5 5
A 8 9 4
B 3 9 3
A 2 7 2
Example Output：
BBB
ABB
AAB
AAB
AABBBBAAAA
**Note**

For the third test case of the sample case:

-   The first game starts with $A = [1, 2, 3]$, $B = [2, 1, 3]$;
-   The second game starts with $A = [2, 3, 1]$, $B = [2, 1, 3]$;
-   The third game starts with $A = [2, 3, 1]$, $B = [1, 2, 3]$.

###

(E)
Little Q is testing a self-designed puzzle game involving a $2 \times 2$ grid where each cell can either be on or off. When a cell is toggled, its state changes from off to on or from on to off. The following four operations can be performed at a certain cost:
-   Toggle a single cell with cost $a_0$;
-   Toggle a row of cells with cost $a_1$;
-   Toggle a column of cells with cost $a_2$;
-   Toggle all cells with cost $a_3$.
Little Q has realized that the game has started, but the screen somehow malfunctions, blocking him from seeing the current state of any cell. The only feedback he can receive is a special prompt sound triggered if, after an operation, all cells are on.
Knowing all $m$ possible initial grids of the game in advance, Little Q wants to find a sequence of operations, ensuring that regardless of the initial grid when he starts playing, he will always hear the prompt sound after some operations in the order of the sequence.
Please calculate the minimum total cost of such sequence of operations.

**Input**

The first line of the input contains five integers $T$ ($1 \le T \le 10^4$), $a_0$, $a_1$, $a_2$, and $a_3$ ($1 \le a_0,a_1,a_2,a_3 \le 10^6$), indicating the number of games and the costs of each operation. For each game:

The first line contains an integer $m$ ($1 \le m \le 16$), indicating the number of possible initial grids of the game.

Then $m$ grids follow. For each grid:

-   There will first be an empty line if it is not the first grid in the game.
-   For the following two lines, the $i$\-th line contains a string $s_{i,1}s_{i,2}$ of length $2$ consisting of characters 0 and 1, describing a $2 \times 2$ grid as a possible initial grid. Let $(i, j)$ be the cell on the $i$\-th row and the $j$\-th column. If $s_{i, j}$ is 0, then the cell $(i, j)$ is off, or otherwise the cell $(i, j)$ is on.

It is guaranteed that the given grids in a game are pairwise different.

**Output**

For each game, output a line containing an integer, indicating the minimum total cost.

Example Input：
2 1000 100 10 1
4
10
00


01
00


00
10


00
01
1
11
11
Example Output：
1121
2

###

(G)
You are given a simple polygon, but before giving you the $n$ vertices of the polygon, Little Q has shuffled them.

Now you can ask Little Q no more than $(n-2)$ queries, each of which consists of two integers $p$ and $q$ ($0 \le p/q \le 1\,000, 1 \le q \le 1\,000$). He will tell you the total length of the points on the line $x=p/q$ that lie inside or on the boundary of the polygon, which can be represented as $r/s$ with two integers $r$ and $s$ ($r \ge 0, s \ge 1, \gcd(r,s) = 1$). Here $\gcd(r,s)$ is the greatest common divisor of $r$ and $s$.

You need to find the area of the polygon, which can also be represented as $u/v$ with two integers $u$ and $v$ ($u \ge 0, v \ge 1, \gcd(u,v) = 1$).

The polygon and the order of the vertices are determined before the start of the interaction and do not depend on your queries. In other words, the interactor is not adaptive.

**Input**

The first line of the input contains an integer $T$ ($1 \le T \le 1\,000$), indicating the number of test cases. For each test case:

The first line contains an integer $n$ ($3 \le n \le 1\,000$), indicating the number of vertices of the polygon.

Then $n$ lines follow, each containing two integers $x$ and $y$ ($0 \le x,y \le 1\,000$) that give the coordinates $(x, y)$ of the vertices of the polygon in shuffled order.

The polygon is simple, i.e., its vertices are distinct and no two edges of the polygon intersect or touch, except that consecutive edges touch at their common vertex. In addition, no two consecutive edges are collinear.

It is guaranteed that the sum of $n$ over all test cases does not exceed $1\,000$.



**Interaction**

If you want to ask a query, output one line. First output ? followed by a space, then output two integers $p$ and $q$ ($0 \le p/q \le 1\,000, 1 \le q \le 1\,000$). After flushing your output, your program should read two integers $r$ and $s$ ($r \ge 0, s \ge 1, \gcd(r,s) = 1$), indicating the answer to your query.

If you want to guess the area of the polygon, output one line. First output ! followed by a space, then output two integers $u$ and $v$ ($u \ge 0, v \ge 1, \gcd(u,v) = 1$), indicating that the area of the polygon is $u/v$. After flushing your output, your program should continue processing the next test case, or exit immediately if there are no more test cases. Note that your guess does not count as a query.

To flush your output, you can use:

-   fflush(stdout) (if you use printf) or cout.flush() (if you use cout) in C and C++.
-   System.out.flush() in Java and Kotlin.
-   sys.stdout.flush() in Python.

Example Input：
2
4
0 0
1 3
1 1
3 0

2 1

3
0 0
999 1000
1000 999

1999 999000
Example Output：
2
4
0 0
1 3
1 1
3 0

2 1

3
0 0
999 1000
1000 999

1999 999000

**Note**

For the first sample case, there are three candidate polygons, shown in the figure below. Only the leftmost one meets the answer $2$ to the query $x=1$, and thus the area is $3$. The other two have the answer $3$ to the query $x=1$.

![](https://espresso.codeforces.com/bfe10f6dc813746a1129d86068ec1874aa595fb8.png)

For the second sample case, there is only one candidate polygon, and thus the area is $1999/2$.

Note that the order of the vertices shown in the sample case may not be consistent with the actual provided.

The blank lines in the sample case are added for readability. In your output, extra spaces or blank lines will be ignored.

###

(H)
Byteland has $n$ cities, and there is a bidirectional road between any two cities. There are exactly $(n-2)$ roads with scenery, and if properly built scenery on one more road, one can always travel from one city to the others only through roads with scenery.

Little Q is initially located in the city $1$ with a guide map in his hand, showing some of the roads in Byteland, and starts his journey in Byteland. Assuming he is currently in the city $u$:

-   If he can walk along a road on the guide map to a city $v$ that he has not yet visited, he will choose the smallest such $v$ and walk along the road to city $v$. Note that city $1$ is visited initially;
-   Otherwise, he will return along the road he took to reach city $u$ for the first time, unless he is already in city $1$, in which case the journey ends immediately.

Little Q wants to visit all the sceneries while traveling on no more than one different road without sceneries. You need to help him calculate how many different guide maps can satisfy his requirements. Two guide maps are considered different if and only if there is a road on one map that does not appear on the other.

Since the answer may be large, output it modulo $998\,244\,353$.

**Input**

The first line contains an integer $n$ ($2 \le n \le 2 \times 10^5$), indicating the number of cities.

Then $(n-2)$ lines follow, the $i$\-th of which contains two integers $u$ and $v$ ($1 \le u, v \le n$), indicating that the $i$\-th scenery is on the road between the $u$\-th and the $v$\-th cities. It is guaranteed that if properly built scenery on one more road, one can always travel from one city to the others only through roads with scenery.

**Output**

Output a line containing an integer, indicating the number of different guide maps modulo $998\,244\,353$.

Example Input1：
4
1 4
2 3
Example Output1：
6

Example Input2：
2
Example Output2：
2

**Note**

For the first sample case, one of the feasible guide maps shows $4$ roads $(1,4)$, $(2,3)$, $(1,2)$, and $(1,3)$. Little Q will visit the cities $1 \rightarrow 2 \rightarrow 3 \rightarrow 2 \rightarrow 1 \rightarrow 4 \rightarrow 1$ in order following this guide map and visit the sceneries on roads $(1,4)$ and $(2,3)$ while traveling on only one road $(1,2)$ without sceneries.

For the second sample case, there is no road with scenery, and thus a feasible guide map can not only include but also exclude the only existing road $(1,2)$.

###

(I)
Little Q has planted a tree, which initially has only one root node $1$, which is also a leaf node. Every morning, each leaf node $u$ will sprout two branches:

-   One branch connects node $u$ and node $2u$, with a length of $a_{2u}$;
-   The other branch connects node $u$ and node $2u+1$, with a length of $a_{2u+1}$.

After that, node $u$ is no longer a leaf node, and nodes $2u$ and $2u+1$ become new leaf nodes. This tree will grow for $n$ days, ultimately forming a tree with $\left(2^{n+1}-1\right)$ nodes, of which $2^n$ nodes are leaf nodes.

During these $n$ days, every afternoon, Little Q can choose one of the branches that have already grown to "prune", modifying its length to any positive integer (possibly less than or greater than the original one), or he can choose not to prune any branches at all.

Little Q hopes that after the tree has fully grown, the sum of the lengths of the branches on the simple path from the root node to each leaf node will be pairwise different. You need to find the minimum number of branches that need to be pruned, or indicate that it is impossible to achieve this.

**Input**

The first line of the input contains an integer $T$ ($1 \leq T \leq 1\,000$) indicating the number of test cases. For each test case:

The first line contains an integer $n$ ($1 \le n \le 10$), indicating the number of days the tree grows.

The second line contains $\left(2^{n+1}-2\right)$ integers $a_2, a_3, \ldots, a_{2^{n+1}-1}$ ($1 \le a_i \le 10^8$), indicating the length of the branches.

It is guaranteed that the number of test cases with $n$ greater than $7$ does not exceed $10$.

**Output**

For each test case, output a line containing an integer, indicating the minimum number of branches that need to be pruned if it is possible to meet the requirement, or $-1$ otherwise.

Example Input1：
2
1 2 4 3 2 1
Example Output1：
1

Example Input2：
2
1 2 3 3 2 1
Example Output2：
2

Example Input3：
2
1 2 3 3 1 1
Example Output3：
-1

###

(J)
The 2024 League of Legends World Championship culminated in an epic clash between two titans of professional League of Legends on November 2, 2024. Bilibili Gaming, after dominating the LPL with two domestic titles in 2024, undoubtedly carried the hopes of China's premier league that had endured three years without lifting the Summoner's Cup. In their way stood T1, who had qualified as LCK's fourth seed but proved their championship mettle through their tournament run. And there he was — Faker, the man revered as "the highest mountain and the longest river" — still standing at the center of LoL's greatest stage as if time itself had learned to bow before him. With four crowns already weighing heavy in his legacy, Faker somehow made the hunt for a fifth feel less like ambition and more like destiny. Now, beneath the towering dome of London's O2 Arena, the stakes were immense for both teams: BLG aimed to end the LPL's drought and cement their remarkable 2024 campaign, while T1 sought to defend their title and further establish their dynasty.

In an electrifying best-of-five series that pushed both teams to their limits, T1 emerged victorious over BLG with a hard-fought 3-2 triumph, clinching their fifth world championship. True to the tournament's official slogan "Make Them Believe", T1 mounted an incredible comeback from a 1-2 deficit, reaffirming once again why they remain a seemingly insurmountable obstacle for LPL teams in the international arena.

As we trace back through the journey of these two finalist teams, it all started in that fateful knockout stage, where eight teams competed in a single-elimination tournament: LNG Esports, Weibo Gaming, Hanwha Life Esports, Bilibili Gaming, Top Esports, T1, Gen.G, and FlyQuest. In an eight-team single-elimination tournament format, teams were seeded into the bracket based on their performance in the Swiss stage to face off in head-to-head matches where the loser is immediately eliminated. The tournament progresses through three rounds: Quarterfinals with eight teams, Semifinals with four teams, and the Finals with two teams, ultimately crowning a single champion.

![](https://espresso.codeforces.com/ded80cb9295790e3e0ab8ebf1971ef80a8c2ce2b.png) Figure: Eight-Team Single-Elimination Tournament Bracket

Although Worlds 2024 has irretrievably passed into history, we can still craft our own version of the story. For this problem, you will simulate a hypothetical knockout stage using the same eight-team single-elimination format. You will be given the names and the strength values of the eight teams in order from top to bottom of the Quarterfinals bracket (shown in the leftmost column in Figure), and both the names and the strength values are guaranteed to be pairwise different. When two teams compete, the team with the higher strength value always wins, while the losing team is eliminated. For two teams competing in the Finals, the team that wins is designated as the champion, while the other team is designated as the runner-up.

Your task is to find the champion team and the runner-up team in the hypothetical knockout stage.

**Input**

The input contains eight lines, the $i$\-th of which contains a string $S_i$ ($1 \leq |S_i| \leq 3$) and an integer $t_i$ ($1 \leq t_i \leq 100$), indicating the name and the strength value of the $i$\-th team from top to bottom of the Quarterfinals bracket.

It is guaranteed that all team names contain only uppercase English letters or decimal digits, and both the names and the strength values are pairwise different.

**Output**

Output "A beats B" (without quotes) in one line, where A is the name of the champion team and B is the name of the runner-up team.

Example Input1：
LNG 55
WBG 65
HLE 70
BLG 75
TES 48
T1 80
GEN 60
FLY 50
Example Output1：
T1 beats BLG

Example Input2：
LNG 55
WBG 65
HLE 70
BLG 81
TES 48
T1 80
GEN 60
FLY 50
Example Output2：
BLG beats T1
